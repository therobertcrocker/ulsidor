// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	changelog "github.com/therobertcrocker/ulsidor/internal/domain/types/changelog"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Deserialize mocks base method.
func (m *MockRepository) Deserialize(collection map[string][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deserialize", collection)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deserialize indicates an expected call of Deserialize.
func (mr *MockRepositoryMockRecorder) Deserialize(collection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deserialize", reflect.TypeOf((*MockRepository)(nil).Deserialize), collection)
}

// Init mocks base method.
func (m *MockRepository) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockRepositoryMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRepository)(nil).Init))
}

// LogChange mocks base method.
func (m *MockRepository) LogChange(entry changelog.LogEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogChange", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogChange indicates an expected call of LogChange.
func (mr *MockRepositoryMockRecorder) LogChange(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogChange", reflect.TypeOf((*MockRepository)(nil).LogChange), entry)
}

// Serialize mocks base method.
func (m *MockRepository) Serialize() (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize")
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockRepositoryMockRecorder) Serialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockRepository)(nil).Serialize))
}
