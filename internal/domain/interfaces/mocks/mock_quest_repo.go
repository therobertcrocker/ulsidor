// Code generated by MockGen. DO NOT EDIT.
// Source: quest_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	changelog "github.com/therobertcrocker/ulsidor/internal/domain/types/changelog"
	quests "github.com/therobertcrocker/ulsidor/internal/domain/types/quests"
)

// MockQuestRepository is a mock of QuestRepository interface.
type MockQuestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuestRepositoryMockRecorder
}

// MockQuestRepositoryMockRecorder is the mock recorder for MockQuestRepository.
type MockQuestRepositoryMockRecorder struct {
	mock *MockQuestRepository
}

// NewMockQuestRepository creates a new mock instance.
func NewMockQuestRepository(ctrl *gomock.Controller) *MockQuestRepository {
	mock := &MockQuestRepository{ctrl: ctrl}
	mock.recorder = &MockQuestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestRepository) EXPECT() *MockQuestRepositoryMockRecorder {
	return m.recorder
}

// AddNewQuest mocks base method.
func (m *MockQuestRepository) AddNewQuest(quest *quests.Quest, log changelog.LogEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewQuest", quest, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewQuest indicates an expected call of AddNewQuest.
func (mr *MockQuestRepositoryMockRecorder) AddNewQuest(quest, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewQuest", reflect.TypeOf((*MockQuestRepository)(nil).AddNewQuest), quest, log)
}

// DeleteQuest mocks base method.
func (m *MockQuestRepository) DeleteQuest(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuest", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuest indicates an expected call of DeleteQuest.
func (mr *MockQuestRepositoryMockRecorder) DeleteQuest(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuest", reflect.TypeOf((*MockQuestRepository)(nil).DeleteQuest), id)
}

// Deserialize mocks base method.
func (m *MockQuestRepository) Deserialize(collection map[string][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deserialize", collection)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deserialize indicates an expected call of Deserialize.
func (mr *MockQuestRepositoryMockRecorder) Deserialize(collection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deserialize", reflect.TypeOf((*MockQuestRepository)(nil).Deserialize), collection)
}

// GetQuestByID mocks base method.
func (m *MockQuestRepository) GetQuestByID(id string) (*quests.Quest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestByID", id)
	ret0, _ := ret[0].(*quests.Quest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestByID indicates an expected call of GetQuestByID.
func (mr *MockQuestRepositoryMockRecorder) GetQuestByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestByID", reflect.TypeOf((*MockQuestRepository)(nil).GetQuestByID), id)
}

// Init mocks base method.
func (m *MockQuestRepository) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockQuestRepositoryMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockQuestRepository)(nil).Init))
}

// LogChange mocks base method.
func (m *MockQuestRepository) LogChange(entry changelog.LogEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogChange", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogChange indicates an expected call of LogChange.
func (mr *MockQuestRepositoryMockRecorder) LogChange(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogChange", reflect.TypeOf((*MockQuestRepository)(nil).LogChange), entry)
}

// Serialize mocks base method.
func (m *MockQuestRepository) Serialize() (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize")
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockQuestRepositoryMockRecorder) Serialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockQuestRepository)(nil).Serialize))
}

// UpdateQuest mocks base method.
func (m *MockQuestRepository) UpdateQuest(id string, quest *quests.Quest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuest", id, quest)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuest indicates an expected call of UpdateQuest.
func (mr *MockQuestRepositoryMockRecorder) UpdateQuest(id, quest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuest", reflect.TypeOf((*MockQuestRepository)(nil).UpdateQuest), id, quest)
}
