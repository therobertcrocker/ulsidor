// Code generated by MockGen. DO NOT EDIT.
// Source: storage_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/therobertcrocker/ulsidor/internal/domain/interfaces"
)

// MockStorageManager is a mock of StorageManager interface.
type MockStorageManager struct {
	ctrl     *gomock.Controller
	recorder *MockStorageManagerMockRecorder
}

// MockStorageManagerMockRecorder is the mock recorder for MockStorageManager.
type MockStorageManagerMockRecorder struct {
	mock *MockStorageManager
}

// NewMockStorageManager creates a new mock instance.
func NewMockStorageManager(ctrl *gomock.Controller) *MockStorageManager {
	mock := &MockStorageManager{ctrl: ctrl}
	mock.recorder = &MockStorageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageManager) EXPECT() *MockStorageManagerMockRecorder {
	return m.recorder
}

// LoadRepo mocks base method.
func (m *MockStorageManager) LoadRepo(id string, repo interfaces.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRepo", id, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadRepo indicates an expected call of LoadRepo.
func (mr *MockStorageManagerMockRecorder) LoadRepo(id, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRepo", reflect.TypeOf((*MockStorageManager)(nil).LoadRepo), id, repo)
}

// SaveRepo mocks base method.
func (m *MockStorageManager) SaveRepo(id string, repo interfaces.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRepo", id, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRepo indicates an expected call of SaveRepo.
func (mr *MockStorageManagerMockRecorder) SaveRepo(id, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRepo", reflect.TypeOf((*MockStorageManager)(nil).SaveRepo), id, repo)
}
